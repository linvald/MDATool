package mdatool.gui.shapes;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;

import mdatool.gui.application.Main;

/**
 * @author Jesper Linvald (jesper@linvald.net)
 *
 */
public class UmlClassHeader extends Shape implements PropertyChangeListener{
	

	private EditableTextShape stereoType;
	private EditableTextShape className;
	private Shape parent=null;
	private boolean first = true;
	/**
	 * @param x
	 * @param y
	 * @param width
	 * @param height
	 */
	public UmlClassHeader(int x, int y, int width, int height,Shape parent) {
		//public Shape(int x, int y, int width, int height, Color lineColor, Color fillColor) {
		super(x, y, width, height);
		this.parent = parent;
		//int x, int y, int w, int h, String text, Shape parent
	
		stereoType = new EditableTextShape(x,y,width,height/2,"<<>>", this);
		className =  new EditableTextShape(x,y,width,height/2,"ClassName", this);

		parent.addPropertyChangeListener(this);
		
		position();
		
	}

	
	/* (non-Javadoc)
	 * @see mdatool.gui.shapes.Shape#draw(java.awt.Graphics)
	 */
	public void draw(Graphics g) {

		
		//g.setColor(this.fillColor);
		//g.fillRect(x,y,w,h);
		//g.setColor(this.lineColor);
		//g.drawRect(x,y,w,h);
		className.draw(g);
		stereoType.draw(g);
		g.setColor(Color.black);
	//	g.drawLine(x,y+h+5,x+w,y+h+5);
		//g.drawRect(this.bounds().x,this.bounds().y,this.bounds().width,this.bounds().height);
		if(first){
			parent.move(parent.x,parent.y);
			first = false;
		}
	}



	/* (non-Javadoc)
	 * @see mdatool.gui.shapes.Shape#getContextMenu(java.awt.Point)
	 */
	public JPopupMenu getContextMenu(Point p) {
		final JPopupMenu pop = new JPopupMenu("pop");
		if(this.className.containsPoint(p.x,p.y)){
				final JMenu menuClass = new JMenu("Rename class");
				final JTextField tClass = new JTextField(20);
				tClass.setName("class");
				pop.add(menuClass);
				menuClass.add(tClass);
			addKeyListener(tClass,pop);
		}else if(this.stereoType.containsPoint(p.x,p.y)){
			final JMenu menu = new JMenu("Rename stereotype");
			final JTextField t = new JTextField(20);
			t.setName("stereo");
			menu.add(t);
			t.show();
			pop.add(menu);
			addKeyListener(t,pop);
		}

		
		pop.validate();
		return pop;
	}

	private void addKeyListener(final JTextField t, final JPopupMenu pop) {
		
		t.addKeyListener(new KeyListener() {
			public void keyPressed(KeyEvent e) {
				if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) { //return
					if (t.getText().length() > 0){
						if(t.getName().equals("class")){
							className.setText(t.getText());	
						}else if(t.getName().equals("stereo")){
							stereoType.setText("<<"+t.getText()+">>");
						}
						//(t.getName().equals("class")) ? (className.setText(t.getText())) : (stereoType.setText(t.getText()));
						//setText(t.getText());
						pop.setVisible(false);
						parent.move(parent.x,parent.y);
									position();
									Main.getInstance().getActiveCanvasFrame().repaint();
					
				} else {
					if (t.getText().length() > 0) {
					
					}
				}
			}
			
			}
			public void keyReleased(KeyEvent e) {
				if (t.getText().length() > 0) {}
				//setText(t.getText());
			}
			public void keyTyped(KeyEvent e) {
				if (t.getText().length() > 0) {}
				//setText(t.getText());
			}
		});
	}


	/* (non-Javadoc)
	 * @see mdatool.gui.shapes.Shape#handleDoubleClick(java.awt.Point)
	 */
	public void handleDoubleClick(Point p) {}


	/* (non-Javadoc)
	 * @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
	 */
	public void propertyChange(PropertyChangeEvent arg0) {
		if(arg0.getPropertyName().equals("size")){
			position();		
		}
	}



	/* (non-Javadoc)
	 * @see mdatool.gui.shapes.Shape#move(int, int)
	 */
	public void move(int newX, int newY) {
		super.move(newX, newY);
		if (className != null) {
			position();
		}
	}
	
	public void position(){
		stereoType.x = parent.x + ((parent.w-stereoType.w)/2);
		stereoType.y = parent.y;
		className.x = parent.x + ((parent.w-className.w)/2);
		className.y = stereoType.y + className.h;
		x = parent.x;
		y = parent.y;
		w = parent.w;
		h = stereoType.h + className.h;
	}

}
